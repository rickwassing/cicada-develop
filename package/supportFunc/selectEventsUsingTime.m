function [events, idx] = selectEventsUsingTime(events, startDate, endDate, varargin)

% Initialize the varargin parser
p = inputParser;
addParameter(p, 'label', [], ...
    @(x) validateattributes(x, {'char', 'cell'}, {'nonempty'}) ...
);
addParameter(p, 'type', [], ...
    @(x) validateattributes(x, {'char', 'cell'}, {'nonempty'}) ...
);
addParameter(p, 'enclosed', true, ...
    @(x) validateattributes(x, {'logical'}, {'scalar', 'nonempty'}) ...
);
% Parse the variable arguments
parse(p,varargin{:});

if p.Results.enclosed
    idx = ...
        events.onset >= startDate & ...
        events.onset+events.duration <= endDate;
else
    idx = ...
        (...
            events.onset >= startDate & ...
            events.onset <= endDate ...
        ) | (...
            events.onset+events.duration >= startDate & ...
            events.onset+events.duration <= endDate ...
        ) | (...
            events.onset <= startDate & ...
            events.onset+events.duration >= endDate ...
        );
end

% If the user did not specify a label or type, return all events
if isempty(p.Results.label) && isempty(p.Results.type)
    idx = find(idx);
else
    % If the user specified a label, but not a type
    if isempty(p.Results.type)
        idx = find(...
            idx & ...
            ismember(events.label, p.Results.label));
    % If the user specified a type, but not a label
    elseif isempty(p.Results.label)
        idx = find(...
            idx & ...
            ismember(events.type, p.Results.type));
    % If the user specified a label and a type
    elseif ~isempty(p.Results.type) && ~isempty(p.Results.label)
        idx = find(...
            idx & ...
            ismember(events.label, p.Results.label) & ...
            ismember(events.type, p.Results.type));
    end
end

events = events(idx,:);