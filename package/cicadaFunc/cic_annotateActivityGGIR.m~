function ACT = cic_annotateActivityGGIR(ACT, params)
% ---------------------------------------------------------
% Initialize variables and save the thresholds to the stucture
ACT.analysis.settings.moderateLightThresh = params(1); % lux
ACT.analysis.settings.brightLightThresh = params(2); % lux
% ---------------------------------------------------------
% Save 'sustainedInactivity' as a timeseries in 'ACT.analysis.annotate.acceleration'
ACT.analysis.annotate.acceleration.Data(ACT.analysis.annotate.acceleration.Data == -1) = 0; 
ACT.analysis.annotate.acceleration.Data(sustainedInactive == 1) = -1;

% ---------------------------------------------------------
% PART 2 - FIND EPOCHS OF LIGHT, MODERATE AND VIGOROUS ACTIVITY
% ---------------------------------------------------------
% Get the bouts of moderate to vigorous activity
idxMVPA = ...
    ACT.metric.acceleration.euclNormMinOne.Data >= params.thrAct_mod & sustainedInactive ~= 1;
idxMVPA = ggirGetBout(idxMVPA, params.thrAct_time*(60/ACT.epoch), ...
    'boutcriter', params.boutCrit/100, ...
    'boutClosed', params.boutClosed == 1, ...
    'boutMetric', params.boutMetric, ...
    'ws3', ACT.epoch) == 1;
% ---------------------------------------------------------
% Get the bouts of inactivity
idxInactive = ...
    ACT.metric.acceleration.euclNormMinOne.Data < params.thrAct_lig & ...
    ~idxMVPA;
idxInactive = ggirGetBout(idxInactive, params.thrInact_time*(60/ACT.epoch), ...
    'boutcriter', params.boutCrit/100, ...
    'boutClosed', params.boutClosed == 1, ...
    'boutMetric', params.boutMetric, ...
    'ws3', ACT.epoch) == 1;
% ---------------------------------------------------------
% Get the bouts of light activity
idxLightActivity = ...
    ACT.metric.acceleration.euclNormMinOne.Data >= params.thrAct_lig & ...
    ~idxInactive & sustainedInactive ~= 1;
idxLightActivity = ggirGetBout(idxLightActivity, params.thrAct_time*(60/ACT.epoch), ...
    'boutcriter', params.boutCrit/100, ...
    'boutClosed', params.boutClosed == 1, ...
    'boutMetric', params.boutMetric, ...
    'ws3', ACT.epoch) == 1;
% ---------------------------------------------------------
% Indices of vigorous activity
idxVigorousActivity = sustainedInactive ~= 1 & ...
    ACT.metric.acceleration.euclNormMinOne.Data >= params.thrAct_vig;
% ---------------------------------------------------------
% Save these activity levels as a timeseries in 'ACT.analysis.annotate.acceleration'
ACT.analysis.annotate.acceleration.Data(ACT.analysis.annotate.acceleration.Data == 1) = 0; % first remove the old annotations
ACT.analysis.annotate.acceleration.Data(ACT.analysis.annotate.acceleration.Data == 2) = 0; 
ACT.analysis.annotate.acceleration.Data(ACT.analysis.annotate.acceleration.Data == 3) = 0; 
ACT.analysis.annotate.acceleration.Data(idxLightActivity)              = 1; % light activity
ACT.analysis.annotate.acceleration.Data(idxMVPA)                       = 2; % moderate activity
ACT.analysis.annotate.acceleration.Data(idxMVPA & idxVigorousActivity) = 3; % vigorous activity
% ---------------------------------------------------------
% Set saved to false
ACT.saved = false;
% ---------------------------------------------------------
% Update the pipeline
ACT = cic_updatePipe(ACT, 'analysis');
% ---------------------------------------------------------
% Write history
ACT.history = char(ACT.history, '% ---------------------------------------------------------');
ACT.history = char(ACT.history, '% Annotate the accelerometry data using GGIR''s ''identify_level.R'' function');
ACT.history = char(ACT.history, '% -----');
ACT.history = char(ACT.history, '% Define the parameters');
ACT.history = char(ACT.history, sprintf('params.thrInact_time = %i; %% minutes', params.thrInact_time));
ACT.history = char(ACT.history, sprintf('params.thrInact_angle = %i; %% degrees', params.thrInact_angle));
ACT.history = char(ACT.history, sprintf('params.thrAct_time = %i; %% minutes', params.thrAct_time));
ACT.history = char(ACT.history, sprintf('params.thrAct_lig = %.4f; %% g', params.thrAct_lig));
ACT.history = char(ACT.history, sprintf('params.thrAct_mod = %.4f; %% g', params.thrAct_mod));
ACT.history = char(ACT.history, sprintf('params.thrAct_vig = %.4f; %% g', params.thrAct_vig));
ACT.history = char(ACT.history, sprintf('params.boutCrit = %i; %% percentage', params.boutCrit));
ACT.history = char(ACT.history, sprintf('params.boutClosed = %i; %% logical', params.boutClosed));
ACT.history = char(ACT.history, sprintf('params.boutMetric = %i; %% integer [1 to 4]', params.boutMetric));
ACT.history = char(ACT.history, '% -----');
ACT.history = char(ACT.history, '% Call the annotation function');
ACT.history = char(ACT.history, 'ACT = cic_annotateActivityGGIR(ACT, params);');

end % EOF
