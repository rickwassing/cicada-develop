
function app_constructStaticComponents(app)

% Information labels
if ismember('Info', app.ComponentList)
    if app.ACT.saved
        FileName = app.ACT.filename;
    else
        FileName = [app.ACT.filename, '*'];
    end
    app.Components = [app.Components; ...
        { ...
        app.FilenameLabel,        {'Text', FileName}; ...
        app.StudyLabel,           {'Text', app.ACT.info.study}; ...
        app.ResearcherLabel,      {'Text', app.ACT.info.researcher}; ...
        app.SubjectIDLabel,       {'Text', app.ACT.info.subject}; ...
        app.GroupLabel,           {'Text', app.ACT.info.group}; ...
        app.ConditionLabel,       {'Text', app.ACT.info.condition}; ...
        app.SessionLabel,         {'Text', app.ACT.info.session}; ...
        app.DateOfBirthLabel,     {'Text', app.ACT.info.dob}; ...
        app.SexLabel,             {'Text', app.ACT.info.sex}; ...
        app.HeightLabel,          {'Text', [num2str(app.ACT.info.height), ' cm']}; ...
        app.WeightLabel,          {'Text', [num2str(app.ACT.info.weight), ' kg']}; ...
        app.HandednessLabel,      {'Text', app.ACT.info.handedness}; ...
        app.DeviceLocationLabel,  {'Text', app.ACT.info.deviceLoc}; ...
        app.StartDateLabel,       {'Text', datestr(app.ACT.xmin, 'dd/mm/yyyy HH:MM')}; ...
        app.EndDateLabel,         {'Text', datestr(app.ACT.xmax, 'dd/mm/yyyy HH:MM')}; ...
        app.RecordingLengthLabel, {'Text', duration2str(app.ACT.xmax-app.ACT.xmin)}; ...
        app.SamplingRateLabel,    {'Text', [num2str(app.ACT.srate), ' Hz']}; ...
        }];
end

% Menu items
if ismember('Menu', app.ComponentList)
    app.Components = [app.Components; ...
        { ...
        app.CloseMenu,              {'Enable', app.Menu.CloseMenu.Enable}; ...
        app.SaveDatasetMenu,        {'Enable', app.Menu.SaveDatasetMenu.Enable}; ...
        app.SaveDatasetAsMenu,      {'Enable', app.Menu.DatasetAsMenu.Enable}; ...
        app.ImportEventsMenu,       {'Enable', app.Menu.ImportEventsMenu.Enable}; ...
        app.ImportOtherDataMenu,    {'Enable', app.Menu.ImportOtherDataMenu.Enable}; ...
        app.ExportMenu,             {'Enable', app.Menu.ExportMenu.Enable}; ...
        app.ExportAnalysisMenu,     {'Enable', app.Menu.ExportAnalysisMenu.Enable}; ...
        app.ExportReportMenu,       {'Enable', app.Menu.ExportReportMenu.Enable}; ...
        app.EditMenu,               {'Enable', app.Menu.EditMenu.Enable}; ...
        app.ViewMenu,               {'Enable', app.Menu.ViewMenu.Enable}; ...
        app.ShowActivityCountsMenu, {'Enable', app.Menu.ShowActivityCountsMenu.Enable; 'Checked', app.Menu.ShowActivityCountsMenu.Checked}; ...
        app.ShowEuclideanNormMenu,  {'Enable', app.Menu.ShowEuclideanNormMenu.Enable;  'Checked', app.Menu.ShowEuclideanNormMenu.Checked}; ...
        app.ShowAngleMenu,          {'Enable', app.Menu.ShowAngleMenu.Enable;          'Checked', app.Menu.ShowAngleMenu.Checked}; ...
        app.PreprocessMenu,         {'Enable', app.Menu.PreprocessMenu.Enable}; ...
        app.AnalysisMenu,           {'Enable', app.Menu.AnalysisMenu.Enable}; ...
        app.AnnotateLightMenu,      {'Enable', app.Menu.AnnotateLightMenu.Enable}; ...
        app.StatisticsMenu,         {'Enable', app.Menu.StatisticsMenu.Enable}; ...
        app.WindowMenu,             {'Enable', app.Menu.WindowMenu.Enable}; ...
        }];
end

% Settings panel
if ismember('SettingsPanel', app.ComponentList)
    % Directly construct 'RowHeight' for the Settings Panel's GridLayout
    app.GridLayoutSettingsPanel.RowHeight = app_getGridLayoutSettingsPanelRowHeight(app);
    app.Components = [app.Components; ...
        { ...
        app.ActogramSettingsPanel,         {'Visible', ifelse(isempty(app.ACT.filename), 'off', 'on')}; ...
        app.ActogramSettingsRowSpanInput,  {'Value', app.ACT.display.acceleration.rowspan}; ...
        app.ActogramSettingsLengthInput,   {'Value', num2str(app.ACT.display.actogramLength)}; ...
        app.ActogramSettingsWidthInput,    {'Value', app.ACT.display.actogramWidth}; ...
        app.ActogramSettingsClockMinInput, {'Value', app.ACT.display.actogramStartClock}; ...
        app.ActogramSettingsClockMaxInput, {'Value', app.ACT.display.actogramEndClock}; ...
        app.ActogramSettingsRangeMinInput, {'Value', app.ACT.display.acceleration.range(1)}; ...
        app.ActogramSettingsRangeMaxInput, {'Value', app.ACT.display.acceleration.range(2)}; ...
        app.ActogramSettingsLogInput,      {'Value', app.ACT.display.acceleration.log}; ...
        }];
end

% DataContainer
if ismember('DataContainer', app.ComponentList)
    if ~isempty(app.ACT.ndays)
        DataContainerPosition = [1, 1, app.DataPanel.Position(3)-2, app.ACT.ndays*(app.DataPanel.Position(4)/app.ACT.display.actogramLength)];
        if DataContainerPosition(4) < app.DataPanel.Position(4)
            DataContainerPosition(2) = app.DataPanel.Position(4) - DataContainerPosition(4);
        end
    else
        DataContainerPosition = [1, 1, 1, 1];
    end
    app.Components = [app.Components; ...
        { ...
        app.DataContainer, {'Position', DataContainerPosition}; ...
        }];
end

end
