function app_constructStatsAverageDayGraph(app, GridLayout, timeSeries, varName, unit, multiplier, clockOnsetMax, clockOnsetMin, maxValue, minValue)

% Extract the window size from the variable name
winSize = ifelse(strRegexpCheck(varName, '5h'), 5, ifelse(strRegexpCheck(varName, '30m'), 0.5, 0));

% ---------------------------------------------------------
% UIAxes
% -----
% Check if component should mount, otherwise construct the component
if shouldComponentMount(app, GridLayout, [GridLayout.Tag, '_UIAxes-', varName])
    % Set Layout
    Layout = app.DataPanel.Layout;
    Layout.Row = ifelse(numel(GridLayout.RowHeight) == 1, 1, [1, 4]);
    Layout.Column = 1;
	% Define the properties
    props = { ...
        'Tag', [GridLayout.Tag, '_UIAxes-', varName]; ...
        'XLim', [timeSeries.Time(1), timeSeries.Time(end)+app.ACT.epoch/(60*60*24)]; ...
        'XTick', timeSeries.Time(1):(range(timeSeries.Time)+app.ACT.epoch/(60*60*24))/6:timeSeries.Time(end)+app.ACT.epoch/(60*60*24); ...
        'XTickLabel', datestr(timeSeries.Time(1):(range(timeSeries.Time)+app.ACT.epoch/(60*60*24))/6:timeSeries.Time(end)+app.ACT.epoch/(60*60*24), 'HH:MM'); ...
        'YLim', [0, max([max(timeSeries.Data), 1/multiplier])]; ...
        'YTick', []; ...
        'YTickLabel', []; ...
        'BackgroundColor', [1, 1, 1]; ...
        'XColor', [0.30, 0.60, 0.46]; ...
        'YColor', 'w'; ...
        'Layout', Layout; ...
        'Layer', 'top'; ...
        'FontSize', 8; ...
        'Box', 'off'; ...
        };
    % Mount component using the 'mount_uiaxes' function
    parent = mountComponent(app, 'mount_uiaxes', GridLayout, props);
    parent.Title.String = ' ';
    parent.Title.FontSize = 20;
else
    % Extract parent axes object to use for its children
    parent = findobj(GridLayout.Children, 'Tag', [GridLayout.Tag, '_UIAxes-', varName]);
    parent.Title.String = ' ';
    parent.Title.FontSize = 20;
    % Construct the component with its updated YLim
    constructComponent(app, parent, [], { ...
        'XLim', [timeSeries.Time(1), timeSeries.Time(end)+app.ACT.epoch/(60*60*24)]; ...
        'XTick', timeSeries.Time(1):(range(timeSeries.Time)+app.ACT.epoch/(60*60*24))/6:timeSeries.Time(end)+app.ACT.epoch/(60*60*24); ...
        'XTickLabel', datestr(timeSeries.Time(1):(range(timeSeries.Time)+app.ACT.epoch/(60*60*24))/6:timeSeries.Time(end)+app.ACT.epoch/(60*60*24), 'HH:MM'); ...
        'YLim', [0, max([max(timeSeries.Data), 1/multiplier])]; ...
        });
    
end
% -----
% Patch
% -----
% Check if component should mount
if shouldComponentMount(app, parent, [GridLayout.Tag, '_Patch-', varName])
    % Define the properties
    props = { ...
        'Tag', [GridLayout.Tag, '_Patch-', varName]; ...
        'XData', [-1; timeSeries.Time; 2]; ...
        'YData', [-1; timeSeries.Data; -1]; ...
        'FaceColor', [0.87, 0.92, 0.87]; ...
        'LineStyle', 'none'; ...
        };
    % Mount component using the 'mount_patch' function
    mountComponent(app, 'mount_patch', parent, props);
else
    % Construct the component with its updated XData and YData
    constructComponent(app, [GridLayout.Tag, '_Patch-', varName], parent, {...
        'XData', [-1; timeSeries.Time; 2]; ...
        'YData', [-1; timeSeries.Data; -1]; ...
        });
end
% -----
% Plot max value
% -----
% If this is M10L5, add 5 hours to winSize for the M10 duration
add = ifelse(winSize == 5, 5, 0);
% Check if component should mount
if shouldComponentMount(app, parent, [GridLayout.Tag, '_Plot-max', varName])
    % Get XData and YData
    XData = [mod(datenum(clockOnsetMax, 'HH:MM'), 1), mod(datenum(clockOnsetMax, 'HH:MM'), 1)+(winSize+add)/24];
    YData = [maxValue, maxValue];
    if any(XData > 1)
        XData = [XData-1, NaN, XData];
        YData = [YData, NaN, YData];
    end
    % Define the properties
    props = { ...
        'Tag', [GridLayout.Tag, '_Plot-max', varName]; ...
        'XData', XData; ...
        'YData', YData; ...
        'LineStyle', '-'; ...
        'LineWidth', 1; ...
        'Marker', '^'; ...
        'Color', [0.4983, 0.0222, 0.1202]; ...
        'MarkerFaceColor', [0.7059, 0.1490, 0.2636]; ...
        'MarkerEdgeColor', [0.4983, 0.0222, 0.1202]; ...
        };
    % Mount component using the 'mount_plot' function
    mountComponent(app, 'mount_plot', parent, props);
else
    % Get XData and YData
    XData = [mod(datenum(clockOnsetMax, 'HH:MM'), 1), mod(datenum(clockOnsetMax, 'HH:MM'), 1)+(winSize+add)/24];
    YData = [maxValue, maxValue];
    if any(XData > 1)
        XData = [XData-1, NaN, XData];
        YData = [YData, NaN, YData];
    end
    % Construct the component with its updated XData and YData
    constructComponent(app, [GridLayout.Tag, '_Plot-max', varName], parent, { ...
        'XData', XData; ...
        'YData', YData; ...
        });
end
% -----
% Plot min value
% -----
% Check if component should mount
if shouldComponentMount(app, parent, [GridLayout.Tag, '_Plot-min', varName])
    % Get XData and YData
    XData = [mod(datenum(clockOnsetMin, 'HH:MM'), 1), mod(datenum(clockOnsetMin, 'HH:MM'), 1)+winSize/24];
    YData = [minValue, minValue];
    if any(XData > 1)
        XData = [XData-1, NaN, XData];
        YData = [YData, NaN, YData];
    end
    % Define the properties
    props = { ...
        'Tag', [GridLayout.Tag, '_Plot-min', varName]; ...
        'XData', XData; ...
        'YData', YData; ...
        'LineStyle', '-'; ...
        'Marker', 'v'; ...
        'Color', [0.0936, 0.3909, 0.6030]; ...
        'MarkerFaceColor', [0.3059, 0.5805, 0.7765]; ...
        'MarkerEdgeColor', [0.0936, 0.3909, 0.6030]; ...
        };
    % Mount component using the 'mount_plot' function
    mountComponent(app, 'mount_plot', parent, props);
else
    % Get XData and YData
    XData = [mod(datenum(clockOnsetMin, 'HH:MM'), 1), mod(datenum(clockOnsetMin, 'HH:MM'), 1)+winSize/24];
    YData = [minValue, minValue];
    if any(XData > 1)
        XData = [XData-1, NaN, XData];
        YData = [YData, NaN, YData];
    end
    % Construct the component with its updated XData and YData
    constructComponent(app, [GridLayout.Tag, '_Plot-min', varName], parent, { ...
        'XData', XData; ...
        'YData', YData; ...
        });
end
% -----
% Text max value
% -----
% Check if component should mount
if shouldComponentMount(app, parent, [GridLayout.Tag, '_Text-max', varName])
    % Define the properties
    props = { ...
        'Tag', [GridLayout.Tag, '_Text-max', varName]; ...
        'FontSize', 9; ...
        'FontWeight', 'bold'; ...
        'Color', [0.4983, 0.0222, 0.1202]; ...
        'HorizontalAlignment', 'center'; ...
        'VerticalAlignment', 'top'; ...
        'String', sprintf('\n%s\n%.0f %s', clockOnsetMax, maxValue*multiplier, unit); ...
        'Interpreter', 'tex'; ...
        'Position', [mod(datenum(clockOnsetMax, 'HH:MM'), 1), maxValue, 0]; ...
        };
    mountComponent(app, 'mount_text', parent, props);
else
    % Construct the component with its updated String and Position
    constructComponent(app, [GridLayout.Tag, '_Text-max', varName], parent, { ...
        'String', sprintf('\n%s\n%.0f %s', clockOnsetMax, maxValue*multiplier, unit); ...
        'Position', [mod(datenum(clockOnsetMax, 'HH:MM'), 1), maxValue, 0]; ...
        });
end
% -----
% Text min
% -----
% Check if component should mount
if shouldComponentMount(app, parent, [GridLayout.Tag, '_Text-min', varName])
    % Define the properties
    props = { ...
        'Tag', [GridLayout.Tag, '_Text-min', varName]; ...
        'FontSize', 9; ...
        'FontWeight', 'bold'; ...
        'Color', [0.0936, 0.3909, 0.6030]; ...
        'HorizontalAlignment', 'center'; ...
        'VerticalAlignment', 'bottom'; ...
        'String', sprintf('%s\n%.0f %s\n', clockOnsetMin, minValue*multiplier, unit); ...
        'Interpreter', 'tex'; ...
        'Position', [mod(datenum(clockOnsetMin, 'HH:MM'), 1), minValue, 0]; ...
        };
    mountComponent(app, 'mount_text', parent, props);
else
    % Construct the component with its updated String and Position
    constructComponent(app, [GridLayout.Tag, '_Text-min', varName], parent, { ...
        'String', sprintf('%s\n%.0f %s\n', clockOnsetMin, minValue*multiplier, unit); ...
        'Position', [mod(datenum(clockOnsetMin, 'HH:MM'), 1), minValue, 0]; ...
        });
end

end % EOF
