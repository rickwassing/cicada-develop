function app_constructSingleEvents(app)

% ---------------------------------------------------------
% Find the indices where these specific events are listed in the component list
cmpIdx = find(strRegexpCheck(app.ComponentList, '^Event_day-[0-9]+_id-[0-9]+'));
% ---------------------------------------------------------
% For each of the components ...
for ci = 1:length(cmpIdx)
    % ... extract the event id
    idxId = regexp(app.ComponentList{cmpIdx(ci)}, 'id-[0-9]+');
    id = str2double(app.ComponentList{cmpIdx(ci)}(idxId+3:end));
    % ... and extract the event
    event = app.ACT.events(app.ACT.events.id == id, :);
    % ---------------------------------------------------------
    % If this event does not exist, we can unmount it
    if isempty(event)
        % unmount
        delete(findobj(app.DataContainer.Children, '-regexp', 'Tag', ['^Event_day-[0-9]+_id-', num2str(id)]));
    else
        % ---------------------------------------------------------
        % Check in what panels this event should be mounted in
        panels = [app.DataPanel.Children.Children];
        for pi = 1:length(panels)
            idx = ...
                (...
                event.onset >= panels(pi).UserData.StartDate & ...
                event.onset <= panels(pi).UserData.EndDate ...
                ) | (...
                event.onset+event.duration >= panels(pi).UserData.StartDate & ...
                event.onset+event.duration <= panels(pi).UserData.EndDate ...
                ) | (...
                event.onset <= panels(pi).UserData.StartDate & ...
                event.onset+event.duration >= panels(pi).UserData.EndDate ...
                );
            if ~any(idx) % this panel does not contain this event
                continue
            end
            % ---------------------------------------------------------
            % This panel should have this event mounted
            % -----
            % Extract parent axes object to use for its children
            ax = findobj(panels(pi).Children, 'Tag', ['Axis_day-', num2str(panels(pi).UserData.Day), '_type-events']);
            % -----
            % Check if component should mount
            shouldReorder = false;
            if shouldComponentMount(app, ax, ['Event_day-', num2str(panels(pi).UserData.Day), '_id-' num2str(id)])
                % Get properties that need more elaborate calculation
                [Visible, PickableParts, Color, UserData] = app_getEventPatchProps(app, panels(pi).UserData.Day, event);
                % Set XData
                XData = [...
                    event.onset, ...
                    event.onset, ...
                    event.onset+event.duration, ...
                    event.onset+event.duration ...
                    ];
                % Define the properties
                props = {...
                    'Tag', ['Event_day-', num2str(panels(pi).UserData.Day), '_id-' num2str(id)]; ...
                    'XData', ifelse(event.duration == 0, XData(1), XData); ...
                    'YData', ifelse(event.duration == 0, 0.5, [0, 1, 1, 0]); ...
                    'Marker', ifelse(event.duration == 0, 'v', 'none'); ...
                    'FaceColor', Color; ...
                    'EdgeColor', Color; ...
                    'MarkerFaceColor', Color; ...
                    'Visible', Visible; ...
                    'UserData', UserData; ...
                    'PickableParts', PickableParts; ...
                    'LineStyle', '-'; ...
                    'LineWidth', 1; ...
                    'MarkerEdgeColor', [1, 1, 1]; ...
                    };
                % Mount component using the 'mount_patch' function
                mountComponent(app, 'mount_patch', ax, props);
                % If we have mounted new components, we'll have to re-order them
                shouldReorder = true;
            else
                % Get properties that need more elaborate calculation
                [Visible, PickableParts, Color, UserData] = app_getEventPatchProps(app, panels(pi).UserData.Day, event);
                % Set XData
                XData = [...
                    event.onset, ...
                    event.onset, ...
                    event.onset+event.duration, ...
                    event.onset+event.duration ...
                    ];
                % Construct the component
                constructComponent(app, ['Event_day-', num2str(panels(pi).UserData.Day), '_id-' num2str(id)], ax, {...
                    'XData', ifelse(event.duration == 0, XData(1), XData); ...
                    'YData', ifelse(event.duration == 0, 0.5, [0, 1, 1, 0]); ...
                    'Marker', ifelse(event.duration == 0, 'v', 'none'); ...
                    'FaceColor', Color; ...
                    'EdgeColor', Color; ...
                    'MarkerFaceColor', Color; ...
                    'Visible', Visible; ...
                    'UserData', UserData; ...
                    'PickableParts', PickableParts; ...
                    });
            end
            % If any new components were mounted, we'll have to re-order them
            if shouldReorder
                reorderPlotEvents(app, ax);
            end
        end
    end
end

end